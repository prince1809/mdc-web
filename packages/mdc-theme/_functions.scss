@import "./constants";

@function mdc-theme-luminance($color) {
  $red: nth($mdc-theme-linear-channel-values, red($color) + 1);
  $green: nth($mdc-theme-linear-channel-values, green($color) + 1);
  $blue: nth($mdc-theme-linear-channel-values, blue($color) + 1);

  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

@function mdc-theme-contrast($back, $front) {
  $backLum: mdc-theme-luminance($back) + 0.05;
  $foreLum: mdc-theme-luminance($front) + 0.05;

  @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

@function mdc-theme-tone($color) {
  @if $color == "dark" or $color == "light" {
    @return $color;
  }

  $minimumContrast: 3.1;

  $lightContrast: mdc-theme-contrast($color, white);
  $darkContrast: mdc-theme-contrast($color, rgba(black, 0.87));

  @if ($lightContrast < $minimumContrast) and ($darkContrast > $lightContrast) {
    @return "light";
  } @else {
    @return "dark";
  }
}

@function mdc-theme-contrast-tone($color) {
  @return if(mdc-theme-tone($color) == "dark", "light", "dark");
}

@function mdc-theme-is-var-with-fallback_($style) {
  @return type-of($style) == "map" and map-has-key($style, "varname") and
    map-has-key($style, "fallback");
}

@function mdc-theme-get-var-fallback_($style) {
  @return map-get($style, "fallback");
}

@function mdc-theme-var_($style) {
  $var: map-get($style, "varname");
  $fallback: mdc-theme-get-var-fallback_($style);

  @return var(#{$var}, $fallback);
}
