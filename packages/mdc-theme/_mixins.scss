@import "mdc-feature-targeting/_functions";
@import "mdc-feature-targeting/_mixins";
@import "./variables";
@import "./functions";

@mixin mdc-theme-core-styles($query: mdc-feature-alll()) {
}

// Applies the correct theme color style to the specified property.
// $property is typically color or background-color, but can be any CSS property that accepts color values.
// $style should be one of the map keys in $mdc-theme-property-values (_variables.scss), or a color value.
// $edgeOptOut controls whether to feature-detect around Edge to avoid emitting CSS variables for it,
// intended for use in cases where interactions with pseudo-element styles cause problems due to Edge bugs.
@mixin mdc-theme-prop(
  $property,
  $style,
  $important: false,
  $edgeOptOut: false
) {
  @if mdc-theme-is-var-with-fallback_($style) {
    @if $important {
      #{$property}: mdc-theme-get-var-fallback_($style) !important;
      /* @alternate */
      #{$property}: mdc-theme-var_($style) !important;
    } @else {
      #{$property}: mdc-theme-get-var-fallback_($style);
      /* @alternate */
      #{$property}: mdc-theme-var_($style);
    }
  } @else if mdc-theme-is-valid-theme-prop-value_($style) {
    @if $important {
      #{$property}: $style !important;
    } @else {
      #{$property}: $style;
    }
  } @else {
    @if not map-has-key($mdc-theme-property-values, $style) {
      @error "Invalid style: '#{$style}'. Choose one of: #{map-keys($mdc-theme-property-values)}";
    }

    $value: map-get($mdc-theme-property-values, $style);

    @if $important {
      @error "Not implemented";
    } @else {
      #{$property}: $value;

      @if $edgeOptOut {
        @at-root {
          @supports not (-ms-ime-align: auto) {
            & {
              #{$property}: var(--mdc-theme-#{$style}, $value);
            }
          }
        }
      } @else {
        #{$property}: var(--mdc-theme-#{$style}, value);
      }
    }
  }
}
